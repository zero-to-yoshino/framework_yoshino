package models;

import play.db.Database;
import play.db.Databases;
import play.db.evolutions.*;

import java.beans.Transient;
import java.sql.Connection;

import org.junit.*;
import static org.hamcrest.MatcherAssert.*;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.assertEquals;
import static play.test.Helpers.*;

public class UserModelTest {

  Database database;

//   エントリモデルのエボリューション
  @Before
  public void setupDatabase() {
    database = Databases.inMemory();
    Evolutions.applyEvolutions(
        database,
        Evolutions.forDefault(
            new Evolution(
                1,
                "create table user (id bigint generated by default as identity not null, name varchar(255) not null, email varchar(255) not null, password varchar(255) not null);",
                "drop table user;")));
  }

  @After
  public void shutdownDatabase() {
    Evolutions.cleanupEvolutions(database);
    database.shutdown();
  }

  @Test
  public void 同じIDのデータを入れようとするとエラーを返す() throws Exception {
    Connection connection = database.getConnection();
    connection.prepareStatement("insert into user values (10, 'test-name', 'email', 'password')").execute();
    try {
        connection.prepareStatement("insert into user values (10, 'test-name', 'email', 'password')").execute();
    } catch(org.h2.jdbc.JdbcSQLException e) {       
        assertThat(e.getMessage(), is(containsString("ユニークインデックス、またはプライマリキー違反")));
    }
  }

  @Test
  public void nameにnull値の保存を認めない() throws Exception {
    Connection connection = database.getConnection();
    try {
        connection.prepareStatement("insert into user values (10, null, 'email', 'password')").execute();
    } catch(org.h2.jdbc.JdbcSQLException e) {       
        assertThat(e.getMessage(), is(containsString("列 \"NAME\" にはnull値が許されていません")));
    }
  }

  @Test
  public void emailにnull値の保存を認めない() throws Exception {
    Connection connection = database.getConnection();
    try {
        connection.prepareStatement("insert into user values (10, 'name', null, 'password')").execute();
    } catch(org.h2.jdbc.JdbcSQLException e) {       
        assertThat(e.getMessage(), is(containsString("列 \"EMAIL\" にはnull値が許されていません")));
    }
  }

  @Test
  public void passwordにnull値の保存を認めない() throws Exception {
    Connection connection = database.getConnection();
    try {
        connection.prepareStatement("insert into user values (10, 'name', 'email', null)").execute();
    } catch(org.h2.jdbc.JdbcSQLException e) { 
        assertThat(e.getMessage(), is(containsString("列 \"PASSWORD\" にはnull値が許されていません")));
    }
  }
}